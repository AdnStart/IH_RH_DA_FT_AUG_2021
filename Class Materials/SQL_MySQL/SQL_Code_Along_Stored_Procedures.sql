use olist;

-- Create a simple stored procedure:



-- add parameters to the procedure


-- Create a simple function


/*

Your manager now want to have these KPIs as SQL stored procedures, 
so that they can run them anytime from the server.
You should write procedures that output the following:

1.  A list of cities and their revenue, sorted by revenue, only showing cities that belong to states with a revenue above a certain threshold.
1.2 BONUS: The previous procedure only outputs the top 3 cities by each state.
2. Top N cities by Avg Order amount.

*/






/* 
Olist wants to divide their product categories into 4 segments, defined by whether the category 
is popular or niche and whether it is, on average, cheap or expensive. They are still not sure how
to define "cheap" / "expensive" and "popular" / "niche" - they want to play with different theshold
values and see which categories would fall into which segments.

The 4 segments, therefore, will be:
	- Cheap_popular: more than 'popularity_threshold' items sold, less than 'price_threshold' $/item in revenue
	- Cheap_niche: less than 'popularity_threshold' items sold, less than 'price_threshold' $/item in revenue
	- Expensive_popular: more than 'popularity_threshold' items sold, more than 'price_threshold' $/item in revenue
	- Expensive_niche: less than 'popularity_threshold' items sold, more than 'price_threshold' $/item in revenue

They want to be able to see these categorization for different years (2016, 2017 and 2018).

Your task is to create a stored procedure that takes as input 'price_threshold', 'popularity_threshold' and 'year', 
and shows the following variables for each category and in the inputed year:
	- The category name in English
	- The total number of items sold.
	- The total revenue generated.
	- The average revenue/item.
	- The segment to which the category is assigned.

Notes & hints: 
	- The revenue generated by an item sold is defined as its price + its freight value.
	- The stored procedure just needs to show the results of the query, it doesn't need to store them.
*/